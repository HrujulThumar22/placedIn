[{"D:\\MERN\\placedIn\\client\\src\\index.js":"1","D:\\MERN\\placedIn\\client\\src\\App.js":"2","D:\\MERN\\placedIn\\client\\src\\reportWebVitals.js":"3","D:\\MERN\\placedIn\\client\\src\\components\\login.js":"4","D:\\MERN\\placedIn\\client\\src\\components\\signup.js":"5","D:\\MERN\\placedIn\\client\\src\\components\\Signup.js":"6","D:\\MERN\\placedIn\\client\\src\\components\\Login.js":"7","D:\\MERN\\placedIn\\client\\src\\components\\Dashboard.js":"8","D:\\MERN\\placedIn\\client\\src\\components\\DisplayError.js":"9","D:\\MERN\\placedIn\\client\\src\\components\\Navbar.js":"10","D:\\MERN\\placedIn\\client\\src\\components\\Posts.js":"11","D:\\MERN\\placedIn\\client\\src\\components\\UserProfile.js":"12","D:\\MERN\\placedIn\\client\\src\\components\\routing\\PrivateRoute.js":"13","D:\\MERN\\placedIn\\client\\src\\components\\AddProfile.js":"14","D:\\MERN\\placedIn\\client\\src\\components\\Profile.js":"15","D:\\MERN\\placedIn\\client\\src\\components\\Colleagues.js":"16","D:\\MERN\\placedIn\\client\\src\\components\\InterviewExperience.js":"17","D:\\MERN\\placedIn\\client\\src\\components\\AddPost.js":"18","D:\\MERN\\placedIn\\client\\src\\components\\PostItem.js":"19","D:\\MERN\\placedIn\\client\\src\\components\\CommentBox.js":"20","D:\\MERN\\placedIn\\client\\src\\components\\CommentItem.js":"21","D:\\MERN\\placedIn\\client\\src\\components\\YourPosts.js":"22","D:\\MERN\\placedIn\\client\\src\\components\\YouInterviewExperiences.js":"23","D:\\MERN\\placedIn\\client\\src\\components\\ForgotPassword.js":"24","D:\\MERN\\placedIn\\client\\src\\components\\About.js":"25"},{"size":507,"mtime":1616999952418,"results":"26","hashOfConfig":"27"},{"size":2571,"mtime":1617174903542,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":3826,"mtime":1614849844488,"results":"30","hashOfConfig":"27"},{"size":3986,"mtime":1614572510782,"results":"31","hashOfConfig":"27"},{"size":5745,"mtime":1617188523024,"results":"32","hashOfConfig":"27"},{"size":4015,"mtime":1617188523041,"results":"33","hashOfConfig":"27"},{"size":725,"mtime":1617167857415,"results":"34","hashOfConfig":"27"},{"size":228,"mtime":1617167871937,"results":"35","hashOfConfig":"27"},{"size":3464,"mtime":1617175076273,"results":"36","hashOfConfig":"27"},{"size":4011,"mtime":1617168217580,"results":"37","hashOfConfig":"27"},{"size":5119,"mtime":1617111453344,"results":"38","hashOfConfig":"27"},{"size":361,"mtime":1614840085832,"results":"39","hashOfConfig":"27"},{"size":19831,"mtime":1617184720762,"results":"40","hashOfConfig":"27"},{"size":17458,"mtime":1617184787228,"results":"41","hashOfConfig":"27"},{"size":7356,"mtime":1617168249112,"results":"42","hashOfConfig":"27"},{"size":12862,"mtime":1617172099232,"results":"43","hashOfConfig":"27"},{"size":7076,"mtime":1617167762384,"results":"44","hashOfConfig":"27"},{"size":7803,"mtime":1617171910087,"results":"45","hashOfConfig":"27"},{"size":2674,"mtime":1617167811337,"results":"46","hashOfConfig":"27"},{"size":639,"mtime":1617167833725,"results":"47","hashOfConfig":"27"},{"size":2614,"mtime":1617163714839,"results":"48","hashOfConfig":"27"},{"size":2730,"mtime":1617163705003,"results":"49","hashOfConfig":"27"},{"size":5866,"mtime":1617171247482,"results":"50","hashOfConfig":"27"},{"size":1430,"mtime":1617175292182,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1xdewei",{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"54"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},"D:\\MERN\\placedIn\\client\\src\\index.js",[],["119","120"],"D:\\MERN\\placedIn\\client\\src\\App.js",["121"],"import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Login from './components/Login';\r\nimport Signup from './components/Signup';\r\nimport Dashboard from './components/Dashboard'\r\nimport AddProfile from './components/AddProfile'\r\nimport Profile from './components/Profile'\r\nimport InterviewExperience from './components/InterviewExperience'\r\nimport Colleagues from './components/Colleagues'\r\nimport AddPost from './components/AddPost'\r\nimport About from './components/About'\r\nimport YourPosts from './components/YourPosts'\r\nimport YourInterviewExperiences from './components/YouInterviewExperiences'\r\nimport ForgotPassword from './components/ForgotPassword'\r\nimport PrivateRoute from './components/routing/PrivateRoute'\r\nimport {BrowserRouter as Router , Route, Switch} from 'react-router-dom';\r\nimport '@fortawesome/fontawesome-free/css/all.min.css'; \r\nimport \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\r\nimport 'mdbreact/dist/css/mdb.css';\r\n\r\nfunction App() {\r\n\r\n  const [ user, setUser ] = useState({\r\n    username: '',\r\n    token: '',\r\n    isAuthenticated: false,\r\n    isLoading: true\r\n  })\r\n\r\n  const onAuthenticated = (token, isAuthenticated, isLoading) => {\r\n    setUser({\r\n      token, isAuthenticated, isLoading\r\n    })\r\n    // console.log(isAuthenticated)\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n        <Switch>\r\n          <Route path=\"/\" exact render={() => <Login onAuthenticated={onAuthenticated}/>}></Route>\r\n          <Route path=\"/signup\" exact render={() => <Signup onAuthenticated={onAuthenticated}/>}></Route>\r\n          <Route path=\"/forgot-password\" exact render={() => <ForgotPassword />}></Route>\r\n          <PrivateRoute path=\"/dashboard\" exact component={Dashboard}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/profileSettings\" exact component={AddProfile}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/profiles\" exact component={Colleagues}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/profiles/:user\" component={Profile}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/interview-exp\" component={InterviewExperience}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/post\" component={AddPost}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/myposts\" component={YourPosts}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/myinterviewexperiences\" component={YourInterviewExperiences}></PrivateRoute>\r\n          <PrivateRoute path=\"/dashboard/about\" component={About}></PrivateRoute>\r\n        </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\MERN\\placedIn\\client\\src\\reportWebVitals.js",[],"D:\\MERN\\placedIn\\client\\src\\components\\login.js",["122","123"],"D:\\MERN\\placedIn\\client\\src\\components\\signup.js",["124","125","126"],"D:\\MERN\\placedIn\\client\\src\\components\\Signup.js",["127"],"import React, { useState } from 'react' \r\nimport { Redirect } from 'react-router-dom'\r\nimport DisplayError from './DisplayError'\r\nimport axios from 'axios'\r\n\r\nfunction Signup({ onAuthenticated }) {\r\n\r\n    const [ data, setData ] = useState({\r\n        name: '',\r\n        username: '',\r\n        email: '',\r\n        password1: '',\r\n        password2: ''\r\n    })\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n\r\n    const [ isAuthenticated, setIsAuthenticated ] = useState(false) \r\n\r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n\r\n    const { name, username, email, password1, password2 } = data\r\n\r\n    const onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        if(password1 !== password2) {\r\n            setErrors([{msg: 'Passwords do not match'}])\r\n        } else {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }\r\n            const body = { name, username, email, password: password1 }\r\n\r\n            try {\r\n\r\n                const res = await axios.post('http://localhost:5000/register', body, config)\r\n                \r\n                localStorage.setItem('token',res.data.token)\r\n                setIsAuthenticated(true)\r\n                setIsLoading(false)\r\n                onAuthenticated(username, res.data.token, true, false)\r\n\r\n            } catch ( error ) {\r\n\r\n                localStorage.removeItem('token')\r\n                setErrors(error.response.data.errors)\r\n                console.log(error.response.data.errors)\r\n                setIsAuthenticated(false)\r\n                setIsLoading(true)\r\n                onAuthenticated('','', false, true)\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    if(isAuthenticated) {\r\n        return <Redirect to='/dashboard' />\r\n    }\r\n\r\n    return (\r\n        <div className=\"form mt-5\">\r\n            <ul className=\"tab-group\">\r\n                <li className=\"tab\"><a href=\"/\">Log In</a></li>\r\n                <li className=\"tab active\"><a href=\"/signup\">Sign Up</a></li>\r\n            </ul>\r\n            { errors.length!==0 && errors.map((error) => <DisplayError error={error.msg}/>) }\r\n            <div className=\"tab-content\">\r\n                <div id=\"signup\">   \r\n                    <h1>Sign Up for Free</h1>\r\n                    <form  onSubmit={(e) => onSubmit(e)}>\r\n                        <div className=\"top-row\">\r\n                            <div className=\"field-wrap\">\r\n                                <input \r\n                                    type=\"text\" \r\n                                    value={name}\r\n                                    onChange={(e) => setData({ ...data, name: e.target.value })}\r\n                                    required \r\n                                    autoComplete=\"off\" \r\n                                />\r\n                                <label>\r\n                                    Name<span className=\"req\">*</span>\r\n                                </label>\r\n                            </div>\r\n                            <div className=\"field-wrap\">\r\n                                <input \r\n                                    type=\"text\"\r\n                                    value={username}\r\n                                    onChange={(e) => setData({ ...data, username: e.target.value })}\r\n                                    required \r\n                                    autoComplete=\"off\"    \r\n                                />\r\n                                <label>\r\n                                    User Name<span className=\"req\">*</span>\r\n                                </label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"field-wrap\">\r\n                            <input \r\n                                type=\"email\"\r\n                                value={email}\r\n                                onChange={(e) => setData({ ...data, email: e.target.value })}\r\n                                required \r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <label>\r\n                                Email Address<span className=\"req\">*</span>\r\n                            </label>\r\n                        </div>\r\n                    \r\n                        <div className=\"field-wrap\">\r\n                            <input \r\n                                type=\"password\"\r\n                                value={password1}\r\n                                onChange={(e) => setData({ ...data, password1: e.target.value })}\r\n                                required \r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <label>\r\n                                Enter Password<span className=\"req\">*</span>\r\n                            </label>\r\n                        </div>\r\n\r\n                        <div className=\"field-wrap\">\r\n                            <input \r\n                                type=\"password\"\r\n                                value={password2}\r\n                                onChange={(e) => setData({ ...data, password2: e.target.value })}\r\n                                required \r\n                                autoComplete=\"off\"\r\n                            />\r\n                            <label>\r\n                                Confirm Password<span className=\"req\">*</span>\r\n                            </label>\r\n                        </div>\r\n                        <button type=\"submit\" className=\"button button-block\">Get Started</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Signup;\r\n","D:\\MERN\\placedIn\\client\\src\\components\\Login.js",["128"],"import React, { useState, useEffect } from 'react'\r\nimport { Redirect, Link } from 'react-router-dom'\r\nimport DisplayError from './DisplayError'\r\nimport axios from 'axios'\r\n\r\nfunction Login({ onAuthenticated }) {\r\n\r\n    const [ data, setData ] = useState({\r\n        username: '',\r\n        password: ''\r\n    })\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n\r\n    const [ isAuthenticated, setIsAuthenticated ] = useState(false)\r\n\r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n\r\n    const { username, password } = data\r\n\r\n\r\n    const onSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n        \r\n        // console.log(data)\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const body = { username, password }\r\n\r\n        try {\r\n\r\n            const res = await axios.post('http://localhost:5000/', body, config)\r\n            // console.log(res)\r\n            localStorage.setItem('token',res.data.token)\r\n            setIsAuthenticated(true)\r\n            setIsLoading(false)\r\n            onAuthenticated(username, res.data.token, true, false)\r\n            \r\n        } catch ( error ) {\r\n\r\n            localStorage.removeItem('token')\r\n            setErrors(error.response.data.errors)\r\n            console.log(error.response.data.errors)\r\n            setIsAuthenticated(false)\r\n            setIsLoading(true)\r\n            onAuthenticated('', '', false, true)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(localStorage.getItem('token')){\r\n            localStorage.removeItem('token') \r\n        }\r\n        if(localStorage.getItem('user')){\r\n            localStorage.removeItem('user')\r\n        }\r\n        return  () => {\r\n            setIsLoading(!isLoading)\r\n        }\r\n        \r\n    }, [] )\r\n\r\n    if(isAuthenticated) {\r\n        return <Redirect to='/dashboard' />\r\n    }\r\n\r\n    return (\r\n        <div className=\"form mt-5\">\r\n            <ul className=\"tab-group\">\r\n                <li className=\"tab active\"><a href=\"/\">Log In</a></li>\r\n                <li className=\"tab\"><a href=\"/signup\">Sign Up</a></li>\r\n            </ul>\r\n            { errors.length!==0 && errors.map((error) => <DisplayError error={error.msg}/>) }\r\n            <div className=\"tab-content\">\r\n                <div id=\"login\">   \r\n                    <h1>Welcome Back!</h1>\r\n                    <form onSubmit={(e) => onSubmit(e)}>\r\n                        <div className=\"field-wrap\">\r\n                            <input \r\n                                type=\"text\"  \r\n                                value={username}\r\n                                onChange={(e) => setData({ ...data, username: e.target.value })}\r\n                                required \r\n                                autoComplete=\"off\"                               \r\n                            />\r\n                            <label>\r\n                                Username<span className=\"req\">*</span>\r\n                            </label>\r\n                        </div>\r\n                        <div className=\"field-wrap\">\r\n                            <input \r\n                                type=\"password\"  \r\n                                value={password}\r\n                                onChange={(e) => setData({ ...data, password: e.target.value })}\r\n                                required \r\n                                autoComplete=\"off\"                              \r\n                            />\r\n                            <label>\r\n                                Password<span className=\"req\">*</span>\r\n                            </label>\r\n                        </div>\r\n                        <p className=\"forgot\"><Link to='/forgot-password'>Forgot Password?</Link></p>\r\n                        <button type=\"submit\" className=\"button button-block\">Log In</button>                \r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","D:\\MERN\\placedIn\\client\\src\\components\\Dashboard.js",[],"D:\\MERN\\placedIn\\client\\src\\components\\DisplayError.js",[],"D:\\MERN\\placedIn\\client\\src\\components\\Navbar.js",["129","130","131","132","133","134"],"import React, { useState } from \"react\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBDropdown,\r\nMDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBIcon } from \"mdbreact\";\r\n\r\nfunction Navbar(props) {\r\n\r\n    const [ isOpen, setState ] = useState(false)\r\n    const [ select, setSelect ] = useState({\r\n        home: true,\r\n        colleagues: false,\r\n        interview: false,\r\n    })\r\n\r\n\r\n    const toggleCollapse = () => {\r\n        setState(!isOpen)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <MDBNavbar color=\" mdb-color lighten-1\" dark expand=\"md\" className=\"sticky-top\">\r\n            <MDBNavbarBrand>\r\n                <strong className=\"white-text\">PlacedIn</strong>\r\n            </MDBNavbarBrand>\r\n            <MDBNavbarToggler onClick={toggleCollapse} />\r\n            <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\r\n                <MDBNavbarNav left>\r\n                    <MDBNavItem active={window.location.pathname==='/dashboard'}>\r\n                    <MDBNavLink className=\"navbar_item\" to=\"/dashboard\" >Home</MDBNavLink>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem active={window.location.pathname==='/dashboard/profiles'}>\r\n                    <MDBNavLink className=\"navbar_item\" to=\"/dashboard/profiles\" >Colleagues</MDBNavLink>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem active={window.location.pathname==='/dashboard/myposts'}>\r\n                    <MDBNavLink className=\"navbar_item\" to=\"/dashboard/myposts\" >My Posts</MDBNavLink>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem active={window.location.pathname==='/dashboard/myinterviewexperiences'}>\r\n                    <MDBNavLink className=\"navbar_item\" to=\"/dashboard/myinterviewexperiences\" >My Interview Experiences</MDBNavLink>\r\n                    </MDBNavItem>\r\n                    <MDBNavItem active={window.location.pathname==='/dashboard/about'}>\r\n                    <MDBNavLink className=\"navbar_item\" to=\"/dashboard/about\" >About</MDBNavLink>\r\n                    </MDBNavItem>\r\n                </MDBNavbarNav>\r\n                <MDBNavbarNav right className=\"pr-5\">\r\n                    <MDBNavItem>\r\n                        {/* <MDBDropdown dropleft>\r\n                            <MDBDropdownToggle nav caret>\r\n                            <MDBIcon icon=\"user\" />\r\n                            </MDBDropdownToggle>\r\n                            <MDBDropdownMenu className=\"dropdown-default\">\r\n                                <MDBDropdownItem href=\"/dashboard/profileSettings\">Add profile</MDBDropdownItem>\r\n                                <MDBDropdownItem href=\"/dashboard/profileSettings\">Edit profile</MDBDropdownItem>\r\n                                <MDBDropdownItem href=\"#!\">Your Posts</MDBDropdownItem>\r\n                                <MDBDropdownItem divider/>\r\n                                <MDBDropdownItem href='/'>Logout</MDBDropdownItem>\r\n                            </MDBDropdownMenu>\r\n                        </MDBDropdown> */}\r\n                        \r\n                        <Tooltip title=\"logout\"><a href=\"/\"><MDBIcon icon=\"sign-out-alt\" className=\"text-white\" size=\"2x\"/></a></Tooltip>\r\n                    </MDBNavItem>\r\n                </MDBNavbarNav>\r\n            </MDBCollapse>\r\n            </MDBNavbar> \r\n        </>\r\n    )\r\n}\r\n\r\nexport default Navbar","D:\\MERN\\placedIn\\client\\src\\components\\Posts.js",["135","136"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport PostItem from './PostItem'\r\nimport axios from 'axios'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Alert } from '@material-ui/lab';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport { MDBCol, MDBCard, MDBIcon, MDBBtn, MDBRow } from 'mdbreact';\r\n\r\n\r\n\r\nfunction Post() {\r\n\r\n    const [ posts, setPosts ] = useState([])\r\n    const [ suggestions, setSuggestions ] = useState([])\r\n    const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n\r\n    setValue(newValue);\r\n    \r\n    if(newValue===0) {\r\n\r\n        setSuggestions(posts)\r\n\r\n    } else if(newValue===1) {\r\n\r\n        const temp = posts.filter((post) => {\r\n            if(!post.experience) {\r\n                return post\r\n            }\r\n        })\r\n\r\n        setSuggestions(temp)\r\n\r\n    } else if(newValue===2) {\r\n\r\n        const temp = posts.filter((post) => {\r\n            if(post.experience) {\r\n                return post\r\n            }\r\n        })\r\n\r\n        setSuggestions(temp)\r\n\r\n    }\r\n\r\n\r\n  };\r\n\r\n    useEffect(() => {\r\n\r\n        if(localStorage.getItem('data')) {\r\n            localStorage.removeItem('data')\r\n        }\r\n        if(localStorage.getItem('title')){\r\n            localStorage.removeItem('title')\r\n        }\r\n        if(localStorage.getItem('text')){\r\n            localStorage.removeItem('text')\r\n        }\r\n\r\n        const fetchPosts = async () => {\r\n\r\n            try {\r\n\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n\r\n                const res1 = await axios.get('http://localhost:5000/interview', config)\r\n                const res2 = await axios.get('http://localhost:5000/post', config)\r\n                \r\n                let posts = res1.data\r\n                posts.unshift(...res2.data)\r\n\r\n                posts.sort((post1, post2) => {\r\n                    let x = new Date(post1.updatedAt)\r\n                    let y = new Date(post2.updatedAt)\r\n                    if(x<y) return 1\r\n                    if(x>=y) return -1\r\n                    return 0\r\n                })\r\n\r\n                setPosts(posts)\r\n                setSuggestions(posts)\r\n\r\n            } catch (error) {\r\n\r\n                console.log(error.response)\r\n\r\n            }\r\n\r\n        }\r\n\r\n        fetchPosts()\r\n\r\n    }, [])\r\n\r\n    return(\r\n        <MDBCol className=\"post pb-4 mt-4\" xl=\"8\">\r\n            <MDBCard className=\"mx-5 mdb-color\">\r\n            <Paper className=\"mdb-color lighten-5\">\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleChange}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n            >\r\n            <Tab label=\"All\"  />\r\n            <Tab label=\"Posts\" icon={<MDBIcon icon=\"pen\"/>}/>\r\n            <Tab label=\"Interview Experiences\" icon={<MDBIcon icon=\"chalkboard-teacher\"/>}/>\r\n  \r\n            </Tabs>\r\n            </Paper>\r\n            { 1 && <MDBRow className=\"mt-5 mx-5 mb-5\">\r\n            \r\n            \r\n                <MDBCol size=\"12\"><Link to={{pathname: 'dashboard/post'}}><MDBBtn className=\"w-100 mx-auto\">Add Post</MDBBtn></Link></MDBCol>\r\n                <MDBCol size=\"12\"><Link to={{pathname: 'dashboard/interview-exp'}}><MDBBtn className=\"w-100 mx-auto\" outline rounded>Add Interview Experience</MDBBtn></Link></MDBCol>\r\n            </MDBRow> }\r\n            </MDBCard>\r\n        \r\n            {\r\n                suggestions.length!==0 ? \r\n                suggestions.map((post) => {\r\n                    return <PostItem  key={post._id} data={post} parent=\"posts\"/>\r\n                }) : \r\n                <Alert  className=\"mx-5 mt-5\" severity=\"info\">No posts</Alert>\r\n\r\n            }\r\n\r\n        </MDBCol>\r\n    )\r\n}\r\n\r\nexport default Post","D:\\MERN\\placedIn\\client\\src\\components\\UserProfile.js",["137","138","139","140"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport purple from '@material-ui/core/colors/purple';\r\nimport { MDBContainer,MDBCol,MDBRow, MDBCard, MDBCardFooter, MDBCardBody, MDBCardTitle, MDBCardText, MDBIcon, MDBBtn } from \"mdbreact\";\r\n\r\nfunction UserProfile() {\r\n\r\n    const [ myProfile, setMyProfile ] = useState({})\r\n    const [ isProfile, setIsProfile ] = useState(true)\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchMyProfile = async () => {\r\n\r\n            try {\r\n\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n\r\n                const res = await axios.get(`http://localhost:5000/profile/me`, config)\r\n    \r\n                setMyProfile(res)\r\n                setIsProfile(true)\r\n\r\n            } catch (error) {\r\n                \r\n                setIsProfile(false)\r\n\r\n            }\r\n\r\n        }\r\n\r\n        fetchMyProfile()\r\n\r\n    }, [])\r\n\r\n    return(\r\n         <MDBCol className=\"profile pb-4 mt-4 \" xl=\"4\">\r\n            { isProfile ? <MDBCard className=\"profile_container mdb-color darken-1 mb-5\">\r\n                <MDBRow>\r\n                    <MDBCol className=\"text-center\">\r\n                          <MDBCardBody className=\"mt-3\">\r\n                            <Avatar src={myProfile.data ? `/images/${myProfile.data.avatar}` : ''} className=\"red mx-auto\" style={{width: '100px', height: '100px'}}>{myProfile.data ? myProfile.data.userId.name[0] : ''}</Avatar>\r\n                            <MDBCardTitle className=\"text-white font-weight-bold mt-3\">{myProfile.data ? myProfile.data.userId.name : ''}</MDBCardTitle>\r\n                            <MDBCardText className=\"text-white\">{myProfile.data ? myProfile.data.company : ''}</MDBCardText>\r\n                            <hr className=\"hr-text mt-5 mb-5\" data-content=\"Your Education\"></hr>\r\n                            <MDBCardText className=\"text-white\">{myProfile.data ? myProfile.data.education[0].college : ''}</MDBCardText>\r\n                            <MDBCardText className=\"text-white\">{myProfile.data ? `${myProfile.data.education[0].degree} in ${myProfile.data.education[0].branch}` : ''}</MDBCardText>\r\n                            <MDBCardText className=\"text-white\">{myProfile.data ? `Batch : ${myProfile.data.education[0].batch}` : ''}</MDBCardText>\r\n                            <hr className=\"hr-text mt-5 mb-5\" data-content=\"Your Actions\"></hr>\r\n                            <MDBRow>\r\n                                <MDBCol>\r\n                                <Link to={{pathname: 'dashboard/myposts'}}><Chip label='Posts' color=\"secondary\" className=\"mr-2 chips_logo\"/></Link>\r\n                                <Link to={{pathname: 'dashboard/myinterviewexperiences'}}><Chip label='Interview Experiences' color=\"default\" className=\"mr-2 chips_logo\"/></Link>\r\n                                <Link to={{ pathname: '/dashboard/profileSettings' }}><Chip label='Profile Settings' color='primary' className='chips_logo'/></Link>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                            <hr className=\"hr-text mt-5\" data-content=\"\"></hr>\r\n                            <MDBRow>\r\n                            <MDBCol className=\"text-center\">\r\n                            { myProfile.data && myProfile.data.linkedIn && <a href={myProfile.data.linkedIn} className='px-2 fa-lg li-ic text-white profile_logo'>\r\n                                <MDBIcon fab icon='linkedin-in'></MDBIcon>\r\n                            </a> }\r\n                            { myProfile.data && myProfile.data.instagram && <a href={myProfile.data.instagram} className='px-2 fa-lg fb-ic text-white profile_logo'>\r\n                                <MDBIcon fab icon='instagram'></MDBIcon>\r\n                            </a> }\r\n                            { myProfile.data && myProfile.data.twitter && <a href={myProfile.data.twitter} className='px-2 fa-lg tw-ic text-white profile_logo'>\r\n                                <MDBIcon fab icon='twitter'></MDBIcon>\r\n                            </a> }\r\n                            { myProfile.data && myProfile.data.facebook && <a href={myProfile.data.facebook} className='px-2 fa-lg fb-ic text-white profile_logo'>\r\n                                    <MDBIcon fab icon='facebook-f'></MDBIcon>\r\n                            </a> }\r\n                            </MDBCol>\r\n                            </MDBRow>\r\n                        </MDBCardBody>\r\n                    </MDBCol>\r\n                </MDBRow> \r\n            </MDBCard> : \r\n                <Link to={{ pathname: '/dashboard/profileSettings' }}>\r\n                    <MDBBtn  className='chips_logo w-100 h-30 mx-auto' color='info'>Profile Settings</MDBBtn>\r\n                </Link>\r\n             }\r\n        </MDBCol>\r\n    )\r\n}\r\n\r\nexport default UserProfile","D:\\MERN\\placedIn\\client\\src\\components\\routing\\PrivateRoute.js",[],"D:\\MERN\\placedIn\\client\\src\\components\\AddProfile.js",["141","142"],"import React, { useState, useEffect } from \"react\";\r\nimport axios from 'axios'\r\nimport Navbar from './Navbar';\r\nimport DisplayError from './DisplayError'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\ntoast.configure()\r\nfunction AddProfile(){\r\n    \r\n    // State as object containing form fields\r\n    const [ profile, setProfile ] = useState({\r\n        skills: '',\r\n        company: '',\r\n        portfolio: '',\r\n        avatar: '',\r\n        linkedIn: '',\r\n        instagram: '',\r\n        facebook: '',\r\n        twitter: '',\r\n        college: '',\r\n        degree: '',\r\n        branch: '',\r\n        batch: '',\r\n        cfUserName: '',\r\n        ccUserName: '',\r\n        githubUserName: '',\r\n    })\r\n\r\n    // State as boolean value to check if form is successfully submitted\r\n    const [ isSubmited, setIsSubmited ] = useState(false)\r\n\r\n    //State as object containing errors\r\n    const [ errors, setErrors ] = useState({\r\n        cfUserNameError: '',\r\n        ccUserNameError: '',\r\n        githubUserNameError: '',\r\n        batchError: ''\r\n    })\r\n\r\n    // Useeffect ( Behaves as => ComponentDidMount ) to fetch data if user has added profile already and wants to edit\r\n    useEffect(() => {\r\n\r\n        //Async function to fetch user profile\r\n        const FetchData = async() => {    \r\n            try {\r\n                //config object containing header with token \r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n\r\n                //Sending get request to mentioned route\r\n                const userProfile = await axios.get('http://localhost:5000/profile/me', config)\r\n                \r\n                //Destructuring the object returned from the get request\r\n                const { education, skills, company, portfolio,\r\n                linkedIn, instagram, facebook, twitter, cfUserName, ccUserName, githubUserName, avatar } = userProfile.data\r\n                const { college, branch, batch, degree } = education[0]\r\n                \r\n                //Skills is an array in database...so converting it to string to display in appropriate form\r\n                const res = skills.toString()\r\n                let userSkills=''\r\n                for(let i=0;i<res.length;i++){\r\n                    if(res[i]===','){\r\n                        userSkills+=', '\r\n                    }else{\r\n                        userSkills+=res[i]\r\n                    }\r\n                }\r\n\r\n                //Updating the state with the values received from get request\r\n                setProfile({ skills: userSkills, company, portfolio, linkedIn, instagram, twitter, facebook, \r\n                college, degree, branch, batch, cfUserName, ccUserName, githubUserName, avatar  })\r\n\r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n\r\n        }\r\n\r\n        FetchData()\r\n\r\n    }, [])\r\n\r\n\r\n    //Async function to store / update user profile on submitting the form\r\n    const onSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        setErrors({ cfUserNameError: '', ccUserNameError: '', githubUserNameError: '' })\r\n\r\n        let cfUserNameError='', ccUserNameError='', githubUserNameError=''\r\n        let res1, res2, res3, res5;\r\n\r\n        //Sending get requests to third party api for getting cf, cc and github profiles of the user\r\n        toast.info('Please wait', {\r\n            position: toast.POSITION.TOP_RIGHT,\r\n            autoClose: 1500\r\n        })\r\n        try{\r\n            if(profile.cfUserName) {\r\n                res1 = await axios.get(`https://competitive-coding-api.herokuapp.com/api/codeforces/${profile.cfUserName}`)\r\n                if(res1.data.status==='Failed'){\r\n                    cfUserNameError = 'Please enter valid codeforces user handle'\r\n                }\r\n            }\r\n            if(profile.ccUserName) {\r\n                res2 = await axios.get(`https://competitive-coding-api.herokuapp.com/api/codechef/${profile.ccUserName}`)\r\n                if(res2.data.status==='Failed'){\r\n                    ccUserNameError = 'Please enter valid codechef user handle'\r\n                }\r\n            }\r\n            if(profile.githubUserName)\r\n                res3 = await axios.get(`https://api.github.com/users/${profile.githubUserName}/repos`)\r\n\r\n        } catch ( error ){\r\n            if(error.response.data.message==='Not Found'){\r\n                githubUserNameError = 'Please enter valid github username'\r\n            }\r\n        }\r\n\r\n        // If username is not valid, update errors state\r\n        if( cfUserNameError || ccUserNameError || githubUserNameError ) {\r\n            return setErrors({ cfUserNameError, ccUserNameError, githubUserNameError })\r\n        }\r\n        \r\n        //Destructuring the profile state to include these fields as body in post requests\r\n        const { portfolio, linkedIn, facebook, instagram, twitter, skills, company, avatar, cfUserName, ccUserName, githubUserName } = profile\r\n        const { college, branch, batch, degree } = profile\r\n\r\n        //Body of the post request \r\n        const profileInfo = { portfolio, linkedIn, facebook, instagram, twitter, skills, company, avatar, cfUserName, ccUserName, githubUserName }\r\n        \r\n        const formData = new FormData()\r\n        formData.append('portfolio',profileInfo.portfolio || '')\r\n        formData.append('linkedIn',profileInfo.linkedIn || '')\r\n        formData.append('facebook',profileInfo.facebook || '')\r\n        formData.append('instagram',profileInfo.instagram || '')\r\n        formData.append('twitter',profileInfo.twitter || '') \r\n        formData.append('skills',profileInfo.skills || '')\r\n        formData.append('company',profileInfo.company || '')\r\n        formData.append('avatar',profileInfo.avatar || '')\r\n        formData.append('cfUserName',profileInfo.cfUserName || '')\r\n        formData.append('ccUserName',profileInfo.ccUserName || '')\r\n        formData.append('githubUserName',profileInfo.githubUserName || '')\r\n\r\n        const eduInfo = { college, branch, batch, degree }\r\n\r\n\r\n        try {\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n\r\n            \r\n            //Sending post requests to our REST api to store / update user profile\r\n            res1 = await axios.post('http://localhost:5000/profile', formData, config)\r\n            res5 = await axios.put('http://localhost:5000/profile/education', eduInfo, config)\r\n\r\n            //If no error occured then change isSubmit to true\r\n            setIsSubmited(true)\r\n\r\n            toast.success('Profile Updated !!', { \r\n                position: toast.POSITION.TOP_CENTER,\r\n                autoClose: 2000\r\n             })\r\n\r\n        } catch (error) {\r\n            console.log(error.response.data)\r\n        }\r\n        \r\n    }\r\n\r\n    // If form submitted successfully then redirect to dashboard\r\n    if(isSubmited) {\r\n        return <Redirect to='/dashboard' />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar />\r\n                <div className=\"container mt-4 mb-5\">\r\n                <div className=\"card shadow\">\r\n                    <div className=\"card-header border-0  cyan darken-3 lighten-1\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-12 text-center\">\r\n                                <h4 className=\"mb-0 text-white font-weight-bold profileForm_header\">Profile Settings</h4>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                <div className=\"card-body\">\r\n                <form className=\"needs-validation\" onSubmit={ e => onSubmit(e) } encType='multipart/form-data'>\r\n                <hr className=\"hr-text-form mt-5 mb-3\" data-content=\"Educational and Professional Details\"></hr>\r\n                    <div className=\"pl-lg-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-college\">College <span className=\"text-danger\">*</span></label>\r\n                                    <input id=\"input-12\" className=\"form-control form-control-alternative\" placeholder=\"Enter College / University Name\" \r\n                                    type=\"text\" value = { profile.college || '' } onChange={ e => setProfile({...profile, college: e.target.value }) } required />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-degree\">Degree <span className=\"text-danger\">*</span></label>\r\n                                    <input id=\"input-10\" className=\"form-control form-control-alternative\" placeholder=\"Enter Degree ( Eg. B.Tech )\" \r\n                                    type=\"text\" value = { profile.degree || '' } onChange={ e => setProfile({...profile, degree: e.target.value }) } required />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-fieldofstudy\">Field of Study <span className=\"text-danger\">*</span></label>\r\n                                    <input id=\"input-job\" className=\"form-control form-control-alternative\" placeholder=\"Enter Field of study\" \r\n                                    type=\"text\" value = { profile.branch || ''} onChange={ e => setProfile({...profile, branch: e.target.value }) } required />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-batch\">Batch <span className=\"text-danger\">*</span></label>\r\n                                    <input id=\"input-job\" className=\"form-control form-control-alternative\" placeholder=\"Enter your passing year ( Eg. 2022 )\" \r\n                                    type=\"string\" value = { profile.batch || '' } onChange={ e => setProfile({...profile, batch: e.target.value }) } required />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-company\">Company</label>\r\n                                    <input id=\"input-job\" className=\"form-control form-control-alternative\" placeholder=\"Enter name of the company you are placed in\" \r\n                                    type=\"text\" value={ profile.company || '' } onChange={ e => setProfile({...profile, company: e.target.value }) } />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <hr className=\"hr-text-form mt-5 mb-3\" data-content=\"Skills\"></hr>\r\n                    <div className=\"pl-lg-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-skill1\">Skills <span className=\"text-danger\">*</span></label>\r\n                                    <input id=\"input-skill1\" className=\"form-control form-control-alternative\" placeholder=\"Enter comma separated values\" \r\n                                    type=\"text\" value={ profile.skills || '' } onChange={ e => setProfile({...profile, skills: e.target.value }) } required />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"hr-text-form mt-5 mb-4\" data-content=\"Coding Platform Information\"></hr>\r\n                    <div className=\"pl-lg-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-4\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-codeforces\">Codeforces</label>\r\n                                    <input id=\"input-codeforces\" className=\"form-control form-control-alternative\" placeholder=\"Enter Codeforced Handle\" \r\n                                    type=\"text\"  value={ profile.cfUserName || '' } onChange={ e => setProfile({...profile, cfUserName: e.target.value }) } />\r\n                                </div>\r\n                                { errors.cfUserNameError && <DisplayError error={ errors.cfUserNameError }/> }\r\n                            </div>\r\n                            <div className=\"col-lg-4\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-codechef\">Codechef</label>\r\n                                    <input type=\"text\" id=\"input-codechef\" className=\"form-control form-control-alternative\" placeholder=\"Enter Codechef Handle\" \r\n                                        value={ profile.ccUserName || '' } onChange={ e => setProfile({...profile, ccUserName: e.target.value }) }\r\n                                    />\r\n                                </div>\r\n                                { errors.ccUserNameError && <DisplayError error={ errors.ccUserNameError }/> }\r\n                            </div>\r\n                            <div className=\"col-lg-4\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-github\">Github</label>\r\n                                    <input type=\"text\" id=\"input-github\" className=\"form-control form-control-alternative\" placeholder=\"Enter Github ID\" \r\n                                        value={ profile.githubUserName || '' } onChange={ e => setProfile({...profile, githubUserName: e.target.value }) }\r\n                                    />\r\n                                </div>\r\n                                { errors.githubUserNameError && <DisplayError error={ errors.githubUserNameError }/> }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <hr className=\"hr-text-form mt-5 mb-3\" data-content=\"Social Information\"></hr>\r\n                    <div className=\"pl-lg-4\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-lg-12 mb-3\">\r\n                            <div className=\"form-group focused\">\r\n                                <label className=\"form-control-label mr-3\" htmlFor=\"input-profile-photo\">Upload profile photo</label>\r\n                                <input \r\n                                    type=\"file\" \r\n                                    accept=\".png, .jpg, .jpeg\"\r\n                                    name=\"photo\"\r\n                                    className=\"form-control-file\"\r\n                                    onChange={ e => setProfile({...profile, avatar: e.target.files[0] }) }\r\n                                />\r\n                            </div>\r\n                            </div>\r\n                            <div className=\"col-lg-12\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-website\">Resume Link</label>\r\n                                    <input type=\"text\" id=\"input-website\" className=\"form-control form-control-alternative\" placeholder=\"Enter link here\" \r\n                                     value={ profile.portfolio || '' }   onChange={ e => setProfile({...profile, portfolio: e.target.value }) } />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-linkedin\">Linkedin</label>\r\n                                    <input type=\"text\" id=\"input-linkedin\" className=\"form-control form-control-alternative\" placeholder=\"Enter Linkedin profile link\" \r\n                                        value={ profile.linkedIn || '' }   onChange={ e => setProfile({...profile, linkedIn: e.target.value }) }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6\">\r\n                                <div className=\"form-group\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-insta\">Instagram</label>\r\n                                    <input type=\"text\" id=\"input-insta\" className=\"form-control form-control-alternative\" placeholder=\"Enter Instagram profile link\" \r\n                                        value={ profile.instagram || '' }   onChange={ e => setProfile({...profile, instagram: e.target.value }) }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"col-lg-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-twitter\">Twitter</label>\r\n                                    <input type=\"text\" id=\"input-twitter\" className=\"form-control form-control-alternative\" placeholder=\"Enter Twitter profile link\" \r\n                                        value={ profile.twitter || '' }   onChange={ e => setProfile({...profile, twitter: e.target.value }) }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-lg-6\">\r\n                                <div className=\"form-group focused\">\r\n                                    <label className=\"form-control-label\" htmlFor=\"input-facebook\">Facebook</label>\r\n                                    <input type=\"text\" id=\"input-facebook\" className=\"form-control form-control-alternative\" placeholder=\"Enter Facebook profile link\" \r\n                                        value={ profile.facebook || '' }   onChange={ e => setProfile({...profile, facebook: e.target.value }) }\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <br></br>\r\n                    <div className=\"text-center\">\r\n                    <button className=\"btn cyan darken-3 btn-1 text-white w-75 mt-5 mb-5 font-weight-bold\" type=\"submit\">Update Profile</button>\r\n                    </div>\r\n                </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddProfile;","D:\\MERN\\placedIn\\client\\src\\components\\Profile.js",["143"],"import React, { useEffect, useState } from \"react\";\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport axios from 'axios'\r\nimport Navbar from './Navbar';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { MDBContainer,MDBCol,MDBRow, MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBIcon } from \"mdbreact\";\r\n\r\nfunction Profile(props){\r\n\r\n    const [ userData, setUserData ] = useState({\r\n        name: '',\r\n        avatar: '',\r\n        company: '',\r\n        twitter: '',\r\n        instagram: '',\r\n        facebook: '',\r\n        linkedIn: '',\r\n        portfolio: '',\r\n        college: '',\r\n        degree: '',\r\n        branch: '',\r\n        batch: '',\r\n        skills: '',\r\n        cfUserName: '',\r\n        cfRating: '',\r\n        cfRank: '',\r\n        cfMaxRating: '',\r\n        cfMaxRank: '',\r\n        cfProfile: '',\r\n        ccUserName: '',\r\n        ccRating: '',\r\n        ccRank: '',\r\n        ccMaxRating: '',\r\n        ccMaxRank: '',\r\n        ccProfile: '',\r\n        githubUserName: '',\r\n        githubRepos: [],\r\n        githubProfile: ''\r\n    })\r\n\r\n    const [ isLoading, setIsLoading ] = useState(true)\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchUser = async () => {\r\n\r\n            if(localStorage.getItem('user')){\r\n                localStorage.removeItem('user')\r\n            }\r\n\r\n            try{\r\n\r\n                const userId = props.location.userId\r\n\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n\r\n                const res = await axios.get(`http://localhost:5000/profile/${userId}`, config)\r\n                \r\n                const { cfUserName, ccUserName, githubUserName, education, skills, company, portfolio,\r\n                linkedIn, instagram, facebook, twitter, avatar } = res.data\r\n\r\n                const { college, branch, batch, degree } = education[0]\r\n\r\n                const temp = skills.toString()\r\n                let userSkills=''\r\n                for(let i=0;i<temp.length;i++){\r\n                    if(temp[i]===','){\r\n                        userSkills+=', '\r\n                    }else{\r\n                        userSkills+=temp[i]\r\n                    }\r\n                }\r\n\r\n                let res1, res2, res3\r\n                let  cfRating, cfMaxRating, cfRank, cfMaxRank, cfProfile, ccRank, ccRating, ccMaxRating, ccMaxRank, ccProfile, githubRepos\r\n\r\n                await Promise.all([\r\n                    cfUserName && await axios.get(`https://competitive-coding-api.herokuapp.com/api/codeforces/${cfUserName}`),\r\n                    ccUserName && await axios.get(`https://competitive-coding-api.herokuapp.com/api/codechef/${ccUserName}`),\r\n                    githubUserName && await axios.get(`https://api.github.com/users/${githubUserName}/repos`)\r\n                ])\r\n                .then( async ([cf, cc, github]) => {\r\n                    res1 = cf\r\n                    res2 = cc\r\n                    res3 = github\r\n                })\r\n                .catch(error => {\r\n                    console.log(error)\r\n                }) \r\n\r\n    \r\n                if(typeof res1 !== 'undefined') {\r\n                    cfRating =  res1.data.rating\r\n                    cfMaxRating =  res1['data']['max rating']\r\n                    cfRank =  res1.data.rank\r\n                    cfMaxRank = res1['data']['max rank']\r\n                    cfProfile =  `https://codeforces.com/profile/${cfUserName}`\r\n                }\r\n                \r\n                if(typeof res2 !== 'undefined') {\r\n                    ccRating = res2.data.rating\r\n                    ccMaxRating =  res2.data.highest_rating\r\n                    ccRank =  Number(res2.data.stars[0])\r\n                    ccProfile =  `https://www.codechef.com/users/${ccUserName}`\r\n                    if(ccMaxRating<=1399)ccMaxRank = 1\r\n                    else if(ccMaxRating<=1599)ccMaxRank = 2\r\n                    else if(ccMaxRating<=1799)ccMaxRank = 3\r\n                    else if(ccMaxRating<=1999)ccMaxRank = 4\r\n                    else if(ccMaxRating<=2199)ccMaxRank = 5\r\n                    else if(ccMaxRating<=2499)ccMaxRank = 6\r\n                    else ccMaxRank = 7\r\n                }\r\n                \r\n                let githubProfile\r\n                if(typeof res3 !== 'undefined') {\r\n                    githubRepos = res3.data.map((repo) => {\r\n                        return { name: repo.name, fullName: repo.full_name, id: repo.id }\r\n                    })\r\n    \r\n                    githubProfile = `https://github.com/${githubUserName}`\r\n                }\r\n\r\n                setUserData({ skills: userSkills, name: res.data.userId.name, company, portfolio, twitter, instagram, linkedIn, facebook, college, degree, branch, batch, cfUserName, ccUserName, cfRating, ccRating, cfRank, ccRank, cfMaxRating, ccMaxRating, cfMaxRank, ccMaxRank, cfProfile, ccProfile, githubUserName, githubRepos, githubProfile, avatar })\r\n                setIsLoading(false)\r\n\r\n                localStorage.setItem('user', JSON.stringify({ skills: userSkills, name: res.data.userId.name, avatar, company, portfolio, twitter, instagram, linkedIn, facebook, college, degree, branch, batch, cfUserName, ccUserName, cfRating, ccRating, cfRank, ccRank, cfMaxRating, ccMaxRating, cfMaxRank, ccMaxRank, cfProfile, ccProfile, githubUserName, githubRepos, githubProfile }))\r\n    \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n\r\n        }\r\n\r\n        if(localStorage.getItem('user')){\r\n            setUserData(JSON.parse(localStorage.getItem('user')))\r\n            setIsLoading(false)\r\n        }\r\n        else fetchUser()\r\n\r\n        return () => {\r\n            setIsLoading(true)\r\n        }\r\n\r\n    }, [])\r\n\r\n    return(\r\n        <>\r\n            <Navbar ></Navbar>\r\n            { isLoading && userData ?  <LinearProgress /> : <MDBContainer mt=\"4\" className=\"mt-4 details_container\">\r\n                <MDBRow className=\"mt-4\">\r\n                    <MDBCol md=\"12\">   \r\n                        <MDBCard className=\"card_container text-center  mdb-color darken-1\">\r\n                            <MDBRow className=\"mb-4\">\r\n                                <MDBCol>\r\n                                    <MDBCardBody className=\"mt-5\">\r\n                                    <Avatar src={userData.avatar ? `/images/${userData.avatar}` : ''} className=\"red mx-auto\" style={{width: '200px', height: '200px'}}>{userData.name ? userData.name[0] : ''}</Avatar>\r\n                                        <MDBCardTitle className=\"white-text mt-3\">{userData.name}</MDBCardTitle>\r\n                                        <MDBCardText className=\"white-text\">{userData.company}</MDBCardText>\r\n                                    </MDBCardBody>\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                            { userData.portfolio && <MDBRow className=\"text-center mb-4\">\r\n                                <MDBCol>\r\n                                     <a href={userData.portfolio} className=\"text-white\"><Chip label='My Resume' color=\"secondary\" className=\"mr-2 chips_logo\"/></a>\r\n                                </MDBCol>\r\n                            </MDBRow> }\r\n                            <MDBRow className=\"mb-4 text-center\">\r\n                                <MDBCol className=\"text-center\">\r\n                                    {\r\n                                        userData.twitter && <a href={userData.twitter}>\r\n                                        <MDBIcon size=\"2x\" className=\"white-text pr-4 profile_logo\" fab icon=\"twitter\" />\r\n                                        </a>\r\n                                    }\r\n                                    {\r\n                                        userData.instagram && <a href={userData.instagram}>\r\n                                        <MDBIcon size=\"2x\" className=\"white-text pr-4 profile_logo\" fab icon=\"instagram\" />\r\n                                        </a>\r\n                                    }\r\n                                    {\r\n                                        userData.facebook && <a href={userData.facebook}>\r\n                                        <MDBIcon size=\"2x\" className=\"white-text pr-4 profile_logo\" fab icon=\"facebook\" />\r\n                                        </a>\r\n                                    }\r\n                                    {\r\n                                        userData.linkedIn && <a href={userData.linkedIn}>\r\n                                        <MDBIcon size=\"2x\" className=\"white-text pr-4 profile_logo\" fab icon=\"linkedin\" />\r\n                                        </a>\r\n                                    }\r\n                                </MDBCol>\r\n                            </MDBRow>\r\n                            <hr className=\"hr-text\" data-content=\"Education\"></hr>\r\n                            <MDBRow className=\"mb-4\">\r\n                                <MDBCardBody>\r\n                                    <h6 className=\"white-text\">{ userData.college }</h6>\r\n                                    <h6 className=\"white-text\">{ userData.degree } in { userData.branch }</h6>\r\n                                    <h6 className=\"white-text\">Batch - { userData.batch }</h6>\r\n                                </MDBCardBody>\r\n                            </MDBRow>\r\n                            <hr className=\"hr-text\" data-content=\"Skills\"></hr>\r\n                            <MDBRow className=\"mb-4\">\r\n                                <MDBCardBody>\r\n                                    <h6 className=\"white-text\">\r\n                                        { userData.skills }\r\n                                    </h6>\r\n                                </MDBCardBody>\r\n                            </MDBRow>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>{ (userData.cfUserName || userData.ccUserName) && \r\n                <MDBRow className=\"mt-5\">{ userData.cfUserName && \r\n                    <MDBCol className=\"mb-5\" md=\"6\">\r\n                        <MDBCard className=\"text-center\">\r\n                            <MDBCardBody>\r\n                                <MDBRow>\r\n                                    <MDBCol md=\"12\">\r\n                                        <MDBRow>\r\n                                            <MDBCol className=\"text-center mt-4\"><h5 className=\"font-weight\"><img className=\"profile-img\" src=\"https://lh3.googleusercontent.com/WsR_f03nbqW3qZjCZeXUYmnmhSWXo3hQhLX9hgl9QHydCgbXQi_VJeAwnmtuIgTHKdQ=s200\" alt=\"\" width=\"50\"></img>Codeforces</h5></MDBCol>\r\n                                        </MDBRow>\r\n                                        <br/>\r\n                                        <h5 className=\"text-info font-weight-bolder\">{ userData.cfRating }</h5>\r\n                                        <h6 className=\"text-muted\">Codeforces Rating</h6><hr />\r\n                                        <h5 className=\"text-info font-weight-bolder\">{ userData.cfRank }</h5>\r\n                                        <h6 className=\"text-muted\">Codeforces Rank</h6><hr />\r\n                                        <h5 className=\"text-danger font-weight-bolder\">{ userData.cfMaxRating }</h5>\r\n                                        <h6 className=\"text-muted\">Highest Rating</h6><hr></hr>\r\n                                        <h5 className=\"text-danger font-weight-bolder\">{ userData.cfMaxRank }</h5>\r\n                                        <h6 className=\"text-muted\">Highest Rank</h6><br /><br />\r\n                                    </MDBCol>\r\n                                    <MDBCol className=\"text-muted text-center\" md=\"12\">\r\n                                        <a href={userData.cfProfile}>\r\n                                            <h5 className='text-primary'>See profile\r\n                                                <MDBIcon icon='chevron-right' className='ml-2' size='sm'></MDBIcon>\r\n                                            </h5>\r\n                                        </a>    \r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>}{ userData.ccUserName &&  \r\n                    <MDBCol className=\"mb-5\" md=\"6\">\r\n                        <MDBCard className=\"text-center\">\r\n                            <MDBCardBody>\r\n                                <MDBRow>\r\n                                    <MDBCol md=\"12\">\r\n                                        <MDBRow>\r\n                                            <MDBCol className=\"text-center mt-4\"><h5 className=\"font-weight\"><img className=\"profile-img\" src=\"https://res-4.cloudinary.com/crunchbase-production/image/upload/c_lpad,f_auto,q_auto:eco/zruiknbedz8yqafxbazb\" alt=\"\" width=\"50\"></img>Codechef</h5></MDBCol>\r\n                                        </MDBRow>\r\n                                        <br/>\r\n                                        <h5 className=\"text-info font-weight-bolder\">{ userData.ccRating }</h5>\r\n                                        <h6 className=\"text-muted\">Codechef Rating</h6><hr />\r\n                                        <h5 className=\"text-info font-weight-bolder\">{ userData.ccRank } <MDBIcon icon=\"star\" /></h5>\r\n                                        <h6 className=\"text-muted\">Codechef Rank</h6><hr />\r\n                                        <h5 className=\"text-danger font-weight-bolder\">{ userData.ccMaxRating }</h5>\r\n                                        <h6 className=\"text-muted\">Highest Rating</h6><hr />\r\n                                        <h5 className=\"text-danger font-weight-bolder\">{ userData.ccMaxRank } <MDBIcon icon=\"star\" /></h5>\r\n                                        <h6 className=\"text-muted\">Highest Rank</h6><br /><br />\r\n                                    </MDBCol>\r\n                                    <MDBCol className=\"text-muted\" md=\"12\">\r\n                                        <a href={ userData.ccProfile }>\r\n                                            <h5 className='text-primary'>See profile\r\n                                                <MDBIcon icon='chevron-right' className='ml-2' size='sm'></MDBIcon>\r\n                                            </h5>\r\n                                        </a> \r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>}\r\n                </MDBRow>}{ userData.githubUserName &&  \r\n                <MDBRow className=\"mb-5\">\r\n                    <MDBCol>\r\n                        <MDBCard className=\"blue-grey lighten-5\">\r\n                            <MDBCardBody className=\"mx-5\">\r\n                                <MDBRow>\r\n                                    <MDBCol md=\"12\" className=\"text-center mb-5 mt-5\">\r\n                                        <h5 className=\"mb-0\"><img className=\"profile-img\" src=\"https://image.flaticon.com/icons/png/512/25/25231.png\" alt=\"\" width=\"50\"></img> Github</h5>\r\n                                    </MDBCol>\r\n                                </MDBRow>\r\n                                {\r\n                                    userData.githubRepos.map((repo) => {\r\n                                        return (\r\n                                            <div key={repo.id}>\r\n                                                <MDBRow>\r\n                                                    <MDBCol md=\"6\"><h5 className=\"text-secondary font-weight-bolder text-center\">{ repo.name }</h5></MDBCol>\r\n                                                    <MDBCol md=\"6\" className=\"text-center\">\r\n                                                        <a href={`https://github.com/${userData.githubUserName}/${repo.name}`}>\r\n                                                            <h5 className='text-primary'>See Repo\r\n                                                                <MDBIcon icon='chevron-right' className='ml-2' size='sm'></MDBIcon>\r\n                                                            </h5>\r\n                                                        </a>\r\n                                                    </MDBCol>\r\n                                                </MDBRow><hr />\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                                <MDBCol className=\"text-muted text-center mt-5\" md=\"12\">\r\n                                        <a href={ userData.githubProfile }>\r\n                                            <h5 className='text-primary'>See profile\r\n                                                <MDBIcon icon='chevron-right' className='ml-2' size='sm'></MDBIcon>\r\n                                            </h5>\r\n                                        </a> \r\n                                </MDBCol>\r\n                            </MDBCardBody>\r\n                        </MDBCard>\r\n                    </MDBCol>\r\n                </MDBRow>}\r\n            </MDBContainer>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;","D:\\MERN\\placedIn\\client\\src\\components\\Colleagues.js",[],"D:\\MERN\\placedIn\\client\\src\\components\\InterviewExperience.js",["144","145","146","147","148"],"import React, { useState, useEffect } from 'react'\r\nimport Navbar from './Navbar'\r\nimport axios from 'axios'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { MDBContainer,MDBRow,MDBCol,MDBCard,MDBCardBody,MDBIcon,MDBCardHeader,MDBCardTitle } from \"mdbreact\";\r\nimport Multiselect from \"react-multi-select-component\";\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nconst programminglabels = [\r\n    { label: 'Array', value: '1' }, { label: 'String', value: '2' }, { label: 'DP', value: '3' }, { label: 'Binary Search', value: '4' }, { label: 'Sort', value: '5' },\r\n    { label: 'Greedy', value: '6' }, { label: 'Two Pointers', value: '7' }, { label: 'Sliding Window', value: '8' }, { label: 'Stack', value: '9' },\r\n    { label: 'Queue', value: '10' }, { label: 'Heap', value: '11' }, { label: 'Priority Queue', value: '12' }, { label: 'Tree', value: '13' }, \r\n    { label: 'Linked List', value: '14' }, { label: 'Recursion', value: '15' }, { label: 'Hashing', value: '16' }, { label: 'BST', value: '17' },\r\n    { label: 'Backtracking', value: '18' }, { label: 'DFS, BFS', value: '19' }, { label: 'Graph', value: '20' }, { label: 'Union Find', value: '21' },\r\n    { label: 'Divide and Conquer', value: '22' }, { label: 'Shortest Path', value: '23' }, { label: 'Topological Sort', value: '24' }, { label: 'Trie', value: '25' }\r\n]\r\n\r\nconst CSFundamentals = [\r\n    { label: 'Data Structures', value: '1' }, { label: 'Algorithms', value: '2' }, { label: 'Object Oriented Programming', value: '3' }, \r\n    { label: 'Operating System', value: '4' }, { label: 'Database Management System', value: '5' }, { label: 'Computer Networks', value: '6' }, { label: 'Computer Architecture', value: '7' }, { label: 'Theory of Computation', value: '8' }, { label: 'Compiler Design', value: '9' }\r\n]\r\n\r\nfunction InterviewExperience(props) {\r\n\r\n    const [ programmingTopics, setProgrammingTopics ] = useState([])\r\n    const [ csFundamentals, setCSFundamentals ] = useState([]);\r\n    const [ formData, setFormData ] = useState({\r\n        company: '', role: '', text: '' \r\n    })\r\n    const [ isSubmitted, setIsSubmited ] = useState(false)\r\n    const [ errors, setErrors ] = useState({\r\n        companyError: '',\r\n        roleError: '',\r\n        csFundamentalsError: ''\r\n    })\r\n\r\n     useEffect(() => {\r\n\r\n        // console.log(props.location.data.programmingTopics)\r\n\r\n        if(props.location.data) {\r\n            setFormData({ company: props.location.data.experience.company, role: props.location.data.experience.role, text: props.location.data.experience.text })\r\n            setProgrammingTopics(props.location.data.experience.programmingTopics)\r\n            setCSFundamentals(props.location.data.experience.csFundamentals)\r\n            localStorage.setItem(\"data\", JSON.stringify(props.location.data))\r\n        } else if ( localStorage.getItem(\"data\") ) {\r\n            const data = JSON.parse(localStorage.getItem(\"data\"))\r\n            console.log(data)\r\n            setFormData({ company: data.experience.company, role: data.experience.role, text: data.experience.text })\r\n            setProgrammingTopics(data.experience.programmingTopics)\r\n            setCSFundamentals(data.experience.csFundamentals)\r\n        }\r\n\r\n     }, [])\r\n\r\n    const onSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n\r\n            const { company, role, text } = formData\r\n\r\n            let companyError, roleError, csFundamentalsError\r\n\r\n            if(!company) {\r\n                companyError = 'Please enter company name'\r\n            }\r\n            if(!role) {\r\n                roleError = 'Enter the role'\r\n            }\r\n            if(csFundamentals.length===0) {\r\n                csFundamentalsError = 'Enter the topics asked'\r\n            }\r\n\r\n            if(companyError) {\r\n                return toast.error('Please enter compnay name!', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n            if(roleError) {\r\n                return toast.error('Please enter role!', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n            if(csFundamentalsError) {\r\n                return toast.error('Please enter CS fundamentals asked !', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n            const body = {\r\n                company, role, text,  programmingTopics, csFundamentals \r\n            }\r\n              \r\n            if(localStorage.getItem(\"data\")) {\r\n\r\n                const id = JSON.parse(localStorage.getItem(\"data\"))._id\r\n                console.log('Hi')\r\n\r\n                const res = await axios.put(`http://localhost:5000/interview/my/${id}`, body, config)\r\n\r\n                setIsSubmited(true)\r\n\r\n                toast.success('Interview experience updated successfully !', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n\r\n            } else {\r\n\r\n                const res = await axios.post('http://localhost:5000/interview/add', body, config)\r\n\r\n                setIsSubmited(true)\r\n\r\n                toast.success('Interview experience added successfully !', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n\r\n            }\r\n            \r\n\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error)\r\n\r\n        }\r\n    }\r\n\r\n    if(isSubmitted) {\r\n        if(localStorage.getItem('data')) {\r\n            localStorage.removeItem('data')\r\n            return <Redirect to='/dashboard/myinterviewexperiences' />\r\n        } \r\n        return <Redirect to='/dashboard'/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n        <Navbar />\r\n            <MDBContainer className=\"mb-5 mt-5\">\r\n            <MDBRow>\r\n                <MDBCol md=\"12\">\r\n                    <MDBCard>\r\n                        <MDBCardHeader className=\"cyan darken-3\">\r\n                            <MDBCardTitle className=\"text-center text-white font-weight-bolder mt-2\">Interview Experience</MDBCardTitle>\r\n                        </MDBCardHeader>\r\n                        <MDBCardBody className=\"mr-2\">\r\n                            <form onSubmit={e => onSubmit(e)}>\r\n                                <hr className=\"hr-text-form mt-5 mb-5\" data-content=\"Company Info.\"></hr>\r\n                                <div className=\"pl-lg-4 mb-5\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-6\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <label className=\"form-control-label\" htmlFor=\"input-company-name\">Company Name <span className=\"text-danger\">*</span></label>\r\n                                                <input type=\"text\" \r\n                                                    value={formData.company} \r\n                                                    onChange={e => setFormData({...formData, company: e.target.value})}\r\n                                                    className=\"form-control form-control-alternative\" \r\n                                                    placeholder=\"Enter the Company Name\" \r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"col-lg-6\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <label className=\"form-control-label\" htmlFor=\"input-role\">For <span className=\"text-danger\">*</span></label>\r\n                                                <input type=\"text\" \r\n                                                    value={formData.role} \r\n                                                    onChange={e => setFormData({...formData, role: e.target.value})}\r\n                                                    className=\"form-control form-control-alternative\" \r\n                                                    placeholder=\"Placement / Internship\" \r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <hr className=\"hr-text-form\" data-content=\"What was asked ?\"></hr>\r\n                                <div className=\"pl-lg-4 mb-5 mt-5\">\r\n                                    <div className=\"row\">\r\n                                        <div style={{zIndex:1001}} className=\"col-md-12\">\r\n                                            <label className=\"form-control-label\" htmlFor=\"input-job\">CS Fundamentals <span className=\"text-danger\">*</span></label>\r\n                                            <Multiselect\r\n                                                options={CSFundamentals}\r\n                                                value={csFundamentals}\r\n                                                onChange={setCSFundamentals}\r\n                                                labelledBy={\"Select\"}\r\n                                            />\r\n                                            \r\n                                        </div>\r\n                                        <div style={{zIndex:1000}} className=\"col-md-12 mt-5\">\r\n                                            <label className=\"form-control-label\" htmlFor=\"input-job\">Programming Topics</label>\r\n                                            <Multiselect\r\n                                                options={programminglabels}\r\n                                                value={programmingTopics}\r\n                                                onChange={setProgrammingTopics}\r\n                                                labelledBy={\"Select\"}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                                <hr className=\"hr-text-form mb-5\" data-content=\"Write your Experience\"></hr>\r\n                                <div className=\"pl-lg-4\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <CKEditor\r\n                                                    editor={ ClassicEditor }\r\n                                                    data={ formData.text }\r\n                                                    onChange={ ( e, editor ) => {\r\n                                                        const data = editor.getData();\r\n                                                        setFormData({...formData, text: data})\r\n                                                    } }\r\n                                                    onReady={ editor => {\r\n                                                        editor.setData(formData.text)\r\n                                                    }}\r\n                                                    config = {{\r\n                                                        removePlugins: ['CKFinderUploadAdapter', 'CKFinder', 'EasyImage', 'Image', 'ImageCaption', 'ImageStyle', 'ImageToolbar', 'ImageUpload', 'MediaEmbed']\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\"><button className=\"mt-5 mb-5 btn w-75 cyan darken-3 text-white font-weight-bold\" type=\"submit\">Add Interview Experience <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" /></button></div>\r\n                                </div>\r\n                            </form>\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InterviewExperience\r\n","D:\\MERN\\placedIn\\client\\src\\components\\AddPost.js",["149","150","151"],"import React, { useState, useEffect } from \"react\";\r\nimport Navbar from './Navbar'\r\nimport axios from 'axios'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { MDBContainer,MDBRow,MDBCol,MDBCard,MDBCardBody,MDBIcon,MDBCardHeader,MDBCardTitle } from \"mdbreact\";\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nfunction AddPost(props){\r\n\r\n    const [ formData, setFormData ] = useState({\r\n        title: '',\r\n        text: ''\r\n    })\r\n\r\n    const [ isSubmitted, setIsSubmited ] = useState(false)\r\n\r\n    useEffect(() => {\r\n\r\n        if(props.location.postId) {\r\n            console.log(props.location)\r\n            setFormData({ title: props.location.title, text: props.location.text })\r\n            localStorage.setItem('postId', props.location.postId)\r\n            localStorage.setItem('title', props.location.title)\r\n            localStorage.setItem('text', props.location.text)\r\n        } else if ( localStorage.getItem('title') ) {\r\n            setFormData({ title: localStorage.getItem('title'), text: localStorage.getItem('text') })\r\n        }\r\n\r\n        console.log(formData)\r\n\r\n    }, [])\r\n\r\n    const onSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n\r\n            const { title, text } = formData\r\n\r\n            if(!title) {\r\n                return toast.error('Write title of the post!', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n            if(!text) {\r\n                return toast.error('Post cannot be empty!', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n            const body = { title, text }\r\n\r\n            if(localStorage.getItem('postId')) {\r\n\r\n                const id = localStorage.getItem('postId')\r\n                const res = await axios.put(`http://localhost:5000/post/my/${id}`, body, config)\r\n\r\n                setIsSubmited(true)\r\n\r\n                toast.success('Post updated successfully !', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n\r\n            } else {\r\n                const res = await axios.post('http://localhost:5000/post/add', body, config)\r\n\r\n                setIsSubmited(true)\r\n\r\n                toast.success('Post added successfully !', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error.response.data.error)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    if(isSubmitted) {\r\n        if(localStorage.getItem('title')) {\r\n            localStorage.removeItem('title')\r\n        } \r\n        if(localStorage.getItem('text')) {\r\n            localStorage.removeItem('text')\r\n        }\r\n        if(localStorage.getItem('postId')) {\r\n            localStorage.removeItem('postId')\r\n            return <Redirect to='/dashboard/myposts' />\r\n        }\r\n        return <Redirect to='/dashboard' />\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Navbar />\r\n        <MDBContainer className=\"mb-5 mt-5\">\r\n            <MDBRow>\r\n                <MDBCol md=\"12\">\r\n                    <MDBCard>\r\n                        <MDBCardHeader color=\"cyan darken-3\">\r\n                            <MDBCardTitle className=\"text-center text-white font-weight-bolder mt-2\">Compose Your Post</MDBCardTitle>\r\n                        </MDBCardHeader>\r\n                        <MDBCardBody>\r\n                            <form onSubmit={e => onSubmit(e)}>\r\n                                <div className=\"pl-lg-4 mb-5\">\r\n                                <hr className=\"hr-text-form mt-5 mb-5\" data-content=\"Title\"></hr>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-12\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <input type=\"text\" \r\n                                                    value={formData.title} \r\n                                                    onChange={e => setFormData({...formData, title: e.target.value})}\r\n                                                    className=\"form-control form-control-alternative\" \r\n                                                    placeholder=\"Enter the title\" \r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <hr className=\"hr-text-form mt-5 mb-5\" data-content=\"Content\"></hr>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-md-12\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <CKEditor\r\n                                                    editor={ ClassicEditor }\r\n                                                    data={formData.text}\r\n                                                    onChange={ ( e, editor ) => {\r\n                                                        const data = editor.getData();\r\n                                                        setFormData({...formData, text: data})\r\n                                                    } }\r\n                                                    onReady={ editor => {\r\n                                                        editor.setData(formData.text)\r\n                                                    }}\r\n                                                    config = {{\r\n                                                        removePlugins: ['CKFinderUploadAdapter', 'CKFinder', 'EasyImage', 'Image', 'ImageCaption', 'ImageStyle', 'ImageToolbar', 'ImageUpload', 'MediaEmbed']\r\n                                                    }}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"text-center\"><button className=\"btn cyan darken-3 w-75 text-white font-weight-bold mt-5\" type=\"submit\">Add post<MDBIcon far icon=\"paper-plane\" className=\"ml-2\" /></button></div>\r\n                                </div>\r\n                            </form>\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default AddPost;","D:\\MERN\\placedIn\\client\\src\\components\\PostItem.js",["152","153","154","155","156","157","158","159","160"],"import React, { useState, useEffect, useRef } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport CommentBox from './CommentBox'\r\nimport parse from 'html-react-parser'\r\nimport Chip from '@material-ui/core/Chip';\r\nimport axios from 'axios'\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport AddComment from '@material-ui/icons/AddCommentRounded';\r\nimport Like from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport Liked from '@material-ui/icons/ThumbUpAlt';\r\nimport { CKEditor } from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { MDBCard,MDBCardHeader, MDBCardBody, MDBCardTitle, MDBBtn, MDBRow, MDBCol, MDBIcon, MDBContainer, MDBCardFooter} from 'mdbreact';\r\n\r\nfunction PostItem(props) {\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ questions, setQuestions ] = useState([])\r\n    const [ subjects, setSubjects ] = useState([])\r\n    const [ text, setText ] = useState('')\r\n    const [ likeToggle, setLikeToggle ] = useState(false)\r\n    const [ onCommentClick, setOnCommentClick ] = useState(false)\r\n    const type = useRef('')\r\n\r\n    const onClick = () => {\r\n        setOnCommentClick(!onCommentClick)\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(props.data)\r\n        if(typeof props.data.title!=='undefined') {\r\n            setTitle(props.data.title)\r\n        }else{\r\n            setTitle(`Interview @${props.data.experience.company}`)\r\n        }\r\n        let text\r\n        if(props.data.experience){\r\n            setQuestions(props.data.experience.programmingTopics)\r\n            setSubjects(props.data.experience.csFundamentals)\r\n            text = props.data.experience.text\r\n            type.current = 'interview'\r\n        }else{\r\n            text = props.data.text\r\n            type.current = 'post'\r\n        }\r\n        text = text.replace('oembed','iframe')\r\n        text = text.replace('/oembed','/iframe')\r\n        text = text.replace('url','src')\r\n        setText(text)\r\n\r\n    }, [] )\r\n\r\n    const onDelete = async () =>{\r\n        \r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n            \r\n            let res1\r\n            if(props.parent==='Interview Experience') {\r\n                res1 = await axios.delete(`http://localhost:5000/interview/my/${props.data._id}`, config)\r\n            } else if(props.parent==='Post') {\r\n                res1 = await axios.delete(`http://localhost:5000/post/my/${props.data._id}`, config)\r\n            }\r\n            props.onFlag()\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error.response)\r\n\r\n        }\r\n        \r\n    }\r\n\r\n    const onLikeTogggle = async () => {\r\n\r\n        setLikeToggle(!likeToggle)\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n            \r\n            let res\r\n\r\n            if(props.data.experience) {\r\n                res = await axios.put(`http://localhost:5000/interview/like/${props.data._id}`, {}, config)\r\n            } else  {\r\n                res = await axios.put(`http://localhost:5000/post/like/${props.data._id}`, {}, config)\r\n            }\r\n\r\n            console.log(res)\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error.response)\r\n\r\n        }\r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <MDBRow className=\"mt-5\">\r\n            <MDBCol md=\"12\">\r\n                <MDBCard className=\"mx-5\">\r\n                    <MDBCardHeader className=\" light-blue darken-3\">\r\n                        <MDBRow>\r\n                            <MDBCol size=\"1\" className=\"m-0 text-right\"><Avatar src={props.data.userId ? `/images/${props.data.userId.avatar}` : ''} className=\"red\">{props.data.userId.name[0]}</Avatar></MDBCol>\r\n                            <MDBCol size=\"11\" className=\"text-left\"><h5 className=\"text-white font-weight-bold m-0 mt-1\">{props.data.userId.name}</h5><h6 className=\"m-0 mt-1 text-white\">{(props.data.updatedAt).substring(0,10)}</h6></MDBCol>\r\n                        </MDBRow>\r\n                    </MDBCardHeader>\r\n                    <MDBCardBody className=\"white\">\r\n                    <h5 style={{color: '#bf360c'}} className=\"mb-4 font-weight-bolder\">{title}</h5>\r\n                    <h6 className=\"text-primary font-weight-bold\">{props.data.experience &&  `For - ${props.data.experience.role}` }</h6>\r\n                        <MDBRow className=\"text-center\">\r\n                            <MDBCol>\r\n                                { questions.length!==0 && <hr className=\"hr-text-form\" data-content=\"Programming Questions asked\"></hr> }\r\n                                { questions.map((topic) => {\r\n                                return <Chip key={topic.value} label={topic.label}   color=\"default\" className=\"mr-3 mb-2\"/> \r\n                                }) }\r\n                                { subjects.length!==0 && <hr className=\"hr-text-form mt-5\" data-content=\"CS Fundamentals asked\"></hr> }\r\n                                { subjects.map((topic) => {\r\n                                return <Chip key={topic.value} label={topic.label}   color=\"primary\" className=\"mr-3 mb-2\"/> \r\n                                }) }\r\n                            </MDBCol>\r\n                        </MDBRow>\r\n                        { text &&  <MDBCard className=\"mt-5\"><MDBCardBody>{ parse(text) }</MDBCardBody></MDBCard> }\r\n                        {/* <div dangerouslySetInnerHTML={{ __html: text }}></div> */}\r\n                        \r\n                        \r\n                        {/* <Chip label=\"DP\"  color=\"default\"/><Chip label=\"Binary Search\"  color=\"secondary\"/> */}\r\n                    </MDBCardBody>\r\n                    <MDBCardFooter className=\"grey lighten-3 mt-5\"> \r\n                        { !likeToggle && <Tooltip className=\"edit\" title=\"Like\"><Like className=\"mr-3 likeNComment\"  onClick={onLikeTogggle} style={{color:'#00838f'}}/></Tooltip>}\r\n                        { likeToggle && <Tooltip className=\"edit\" title=\"Unlike\"><Liked className=\"mr-3 likeNComment\"  onClick={onLikeTogggle} style={{color:'#00838f'}}/></Tooltip>}\r\n                        <Tooltip className=\"edit\" title=\"Comment\"><AddComment  className=\"likeNComment mr-3\" onClick={onClick} style={{color:'#00838f'}} /></Tooltip>\r\n                        { props.parent==='Post' ? <Link to={{ pathname: '/dashboard/post', postId: props.data._id, title: props.data.title, text: props.data.text }}>\r\n                            {props.parent!=='posts' && <Tooltip className=\"edit mr-3\" title={`Edit ${props.parent}`}><EditIcon style={{color:'#00838f'}}/></Tooltip> }\r\n                        </Link> : \r\n                        <Link to={{ pathname: '/dashboard/interview-exp', data: props.data }}>\r\n                            {props.parent!=='posts' && <Tooltip className=\"edit mr-3\" title={`Edit ${props.parent}`}><EditIcon style={{color:'#00838f'}}/></Tooltip> }\r\n                        </Link>\r\n                        }\r\n                        {props.parent!=='posts' && <Tooltip className=\"edit\" title={`Delete ${props.parent}`}><DeleteIcon onClick={e => props.onDelete(props.data._id)} style={{color:'#00838f'}}/></Tooltip> }\r\n                        { onCommentClick &&  <CommentBox postId={props.data._id} type={type} />}\r\n                    </MDBCardFooter>\r\n                </MDBCard>\r\n            </MDBCol>\r\n        </MDBRow>\r\n    )\r\n}\r\n\r\nexport default PostItem\r\n","D:\\MERN\\placedIn\\client\\src\\components\\CommentBox.js",["161"],"import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport CommentItem from './CommentItem'\r\n\r\nfunction CommentBox(props) {\r\n\r\n    const [ data, setFormData ] = useState('')\r\n    const [ comments, setComments ] = useState([])\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchComments = async () => {\r\n\r\n            try {\r\n\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n                \r\n                let res\r\n                if(props.type.current==='post')res = await axios.get(`http://localhost:5000/post/${props.postId}`, config)\r\n                else res = await axios.get(`http://localhost:5000/interview/${props.postId}`, config)\r\n                \r\n                setComments(res.data.comments)\r\n    \r\n            } catch (error) {   \r\n                \r\n                console.log(error.response)\r\n\r\n            }\r\n\r\n        }\r\n\r\n        fetchComments()\r\n\r\n    }, [])\r\n\r\n    const onSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n\r\n            const body = { text: data }\r\n\r\n            let res\r\n            if(props.type.current==='post')res = await axios.put(`http://localhost:5000/post/comment/${props.postId}`, body, config)\r\n            else res = await axios.put(`http://localhost:5000/interview/comment/${props.postId}`, body, config)\r\n\r\n            setFormData('')\r\n            setComments(res.data.comments)\r\n\r\n        } catch (error) {   \r\n            \r\n            console.log(error.response)\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={e=>onSubmit(e)}>\r\n                <div className=\"form-group focused mt-4 mb-5 \">\r\n                    <input type=\"text\" \r\n                        className=\"form-control form-control-alternative addComment\" \r\n                        placeholder=\"Add comment\" \r\n                        value={data}\r\n                        onChange={e => setFormData(e.target.value)}\r\n                    />\r\n                </div>\r\n            </form>\r\n            {\r\n                comments && \r\n                comments.map((comment, index) => {\r\n                    return <CommentItem name={comment.name} text={comment.text} key={index}/>\r\n                })\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CommentBox\r\n","D:\\MERN\\placedIn\\client\\src\\components\\CommentItem.js",[],"D:\\MERN\\placedIn\\client\\src\\components\\YourPosts.js",["162"],"import React, { useState, useEffect } from 'react'\r\nimport PostItem from './PostItem'\r\nimport Navbar from './Navbar'\r\nimport axios from 'axios'\r\nimport { Alert } from '@material-ui/lab';\r\nimport { MDBContainer } from 'mdbreact';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nfunction YourPosts() {\r\n\r\n    const [ posts, setPosts ] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchPosts = async () => {\r\n\r\n            try {\r\n\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n\r\n                const res1 = await axios.get('http://localhost:5000/post/my', config)\r\n                \r\n                let posts = res1.data\r\n\r\n                posts.sort((post1, post2) => {\r\n                    let x = new Date(post1.updatedAt)\r\n                    let y = new Date(post2.updatedAt)\r\n                    if(x<y) return 1\r\n                    if(x>=y) return -1\r\n                    return 0\r\n                })\r\n\r\n                setPosts(posts)\r\n\r\n\r\n            } catch (error) {\r\n\r\n                console.log(error.response)\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        fetchPosts()\r\n\r\n\r\n    }, [])\r\n\r\n    const onDelete = async (post_id) => {\r\n        \r\n        toast.success('Post deleted !', { \r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 2000\r\n        })\r\n\r\n        const Posts = posts.filter((post) => {\r\n            return post._id!==post_id\r\n        })\r\n\r\n        setPosts(Posts)\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n            \r\n            const res1 = await axios.delete(`http://localhost:5000/post/my/${post_id}`, config)\r\n            \r\n\r\n        } catch (error) {\r\n\r\n            console.log(error.response)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n        <Navbar />\r\n        <MDBContainer className=\"post pb-4 mt-4\" xl=\"8\">\r\n            {\r\n                posts.length!==0 ? \r\n                posts.map((post) => {\r\n                    return <PostItem  key={post._id} data={post} parent=\"Post\" onDelete={onDelete}/>\r\n                })\r\n                :\r\n                <Alert severity=\"info\">No Posts!!</Alert>\r\n            }\r\n        </MDBContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default YourPosts\r\n","D:\\MERN\\placedIn\\client\\src\\components\\YouInterviewExperiences.js",["163"],"import React, { useState, useEffect } from 'react'\r\nimport PostItem from './PostItem'\r\nimport Navbar from './Navbar'\r\nimport { Alert } from '@material-ui/lab';\r\nimport axios from 'axios'\r\nimport {  MDBContainer } from 'mdbreact';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\n\r\nfunction YouInterviewExperiences() {\r\n\r\n    const [ posts, setPosts ] = useState([])\r\n    \r\n    useEffect(() => {\r\n\r\n        const fetchPosts = async () => {\r\n\r\n            try {\r\n\r\n                const config = {\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'auth-token': localStorage.getItem('token')\r\n                    }\r\n                }\r\n\r\n                const res1 = await axios.get('http://localhost:5000/interview/my', config)\r\n                \r\n                let posts = res1.data\r\n               \r\n                posts.sort((post1, post2) => {\r\n                    let x = new Date(post1.updatedAt)\r\n                    let y = new Date(post2.updatedAt)\r\n                    if(x<y) return 1\r\n                    if(x>=y) return -1\r\n                    return 0\r\n                })\r\n        \r\n                setPosts(posts)\r\n               \r\n\r\n            } catch (error) {\r\n\r\n                console.log(error.response)\r\n\r\n            }\r\n\r\n\r\n        }\r\n\r\n        fetchPosts()\r\n\r\n    },[])\r\n\r\n    const onDelete = async (post_id) => {\r\n        \r\n        toast.success('Interview Experience deleted !', { \r\n            position: toast.POSITION.TOP_CENTER,\r\n            autoClose: 2000\r\n        })\r\n\r\n        const Posts = posts.filter((post) => {\r\n            return post._id!==post_id\r\n        })\r\n\r\n        setPosts(Posts)\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'auth-token': localStorage.getItem('token')\r\n                }\r\n            }\r\n            \r\n            const res1 = await axios.delete(`http://localhost:5000/interview/my/${post_id}`, config)\r\n            \r\n\r\n        } catch (error) {\r\n\r\n            console.log(error.response)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Navbar />\r\n        <MDBContainer className=\"post pb-4 mt-4 \" xl=\"8\">\r\n            {\r\n                posts.length!==0 ?\r\n                posts.map((post) => {\r\n                    return <PostItem  key={post._id} data={post} parent=\"Interview Experience\" onDelete={onDelete}/>\r\n                })\r\n                :\r\n                <Alert severity=\"info\">No interview experiences!!</Alert>\r\n            }\r\n        </MDBContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default YouInterviewExperiences\r\n","D:\\MERN\\placedIn\\client\\src\\components\\ForgotPassword.js",["164"],"import React, { useState } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport { MDBContainer,MDBRow,MDBCol,MDBCard,MDBCardBody,MDBIcon,MDBCardHeader,MDBCardTitle } from \"mdbreact\";\r\n\r\nfunction ForgotPassword() {\r\n\r\n    const [ formData, setFormdata ] = useState({\r\n        username: '',\r\n        password1: '',\r\n        password2: '',\r\n    })\r\n\r\n    const [ isSubmitted, setIsSubmitted ] = useState(false)\r\n\r\n    const onSubmit = async (e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        try {\r\n\r\n            const config = {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                }\r\n            }\r\n\r\n            if(formData.username===''){\r\n                return toast.error('Enter username', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n            if(formData.password1===''){\r\n                return toast.error('Enter new password', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n            if(formData.password1!==formData.password2) {\r\n                return toast.error('Password does not match!', { \r\n                    position: toast.POSITION.TOP_CENTER,\r\n                    autoClose: 2000\r\n                })\r\n            }\r\n\r\n            const body = { username: formData.username, password: formData.password1 }\r\n\r\n            const res = await axios.put('http://localhost:5000/forgot-password', body, config)\r\n\r\n            setIsSubmitted(true)\r\n\r\n            toast.success('Password changed successfully !', { \r\n                position: toast.POSITION.TOP_CENTER,\r\n                autoClose: 2000\r\n            })\r\n\r\n        } catch ( error ) {\r\n\r\n            toast.error(`${error.response.data.errors[0].msg}`, { \r\n                position: toast.POSITION.TOP_CENTER,\r\n                autoClose: 2000\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n    \r\n    if(isSubmitted) {\r\n        return <Redirect to='/' />\r\n    }\r\n\r\n    return (\r\n        <MDBContainer className=\"mb-5 mt-5\">\r\n            <MDBRow>\r\n                <MDBCol md=\"12\">\r\n                    <MDBCard>\r\n                        <MDBCardHeader color=\"cyan darken-3\">\r\n                            <MDBCardTitle className=\"text-center text-white font-weight-bolder mt-2\">Forgot Password</MDBCardTitle>\r\n                        </MDBCardHeader>\r\n                        <MDBCardBody>\r\n                            <form onSubmit={e => onSubmit(e)}>\r\n                                <div className=\"mt-5\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-12\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <input type=\"text\" \r\n                                                    value={formData.username} \r\n                                                    onChange={e => setFormdata({...formData, username: e.target.value})}\r\n                                                    className=\"form-control form-control-alternative\" \r\n                                                    placeholder=\"Enter your username\" \r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-12\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <input type=\"password\" \r\n                                                    value={formData.password1} \r\n                                                    onChange={e => setFormdata({...formData, password1: e.target.value})}\r\n                                                    className=\"form-control form-control-alternative\" \r\n                                                    placeholder=\"Enter new password\" \r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"row\">\r\n                                        <div className=\"col-lg-12\">\r\n                                            <div className=\"form-group focused\">\r\n                                                <input type=\"password\" \r\n                                                    value={formData.password2} \r\n                                                    onChange={e => setFormdata({...formData, password2: e.target.value})}\r\n                                                    className=\"form-control form-control-alternative\" \r\n                                                    placeholder=\"Confirm new password\" \r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"text-center mb-5\"><button className=\"btn cyan darken-3 w-75 text-white font-weight-bold mt-5\" type=\"submit\">Change Password<MDBIcon far icon=\"paper-plane\" className=\"ml-2\" /></button></div>\r\n                                </div>\r\n                            </form>\r\n                        </MDBCardBody>\r\n                    </MDBCard>\r\n                </MDBCol>\r\n            </MDBRow>\r\n        </MDBContainer>\r\n    )\r\n}\r\n\r\nexport default ForgotPassword\r\n","D:\\MERN\\placedIn\\client\\src\\components\\About.js",["165","166","167","168"],"import React from 'react'\r\nimport Navbar from './Navbar';\r\nimport { MDBContainer,MDBCol,MDBRow, MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBIcon } from \"mdbreact\";\r\n\r\nfunction About() {\r\n    return (\r\n        <>\r\n            <Navbar />\r\n            <MDBContainer mt=\"4\" className=\"mt-5 details_container\">\r\n            <MDBCard className=\"card_container text-center text-white mdb-color darken-1\">\r\n                <MDBCardBody>\r\n                    <MDBCardTitle className=\"white-text mt-5\">About</MDBCardTitle>\r\n                    <hr className=\"hr-text mt-5\" data-content=\"\"></hr>\r\n                    <h6 className=\"white-text text-center mt-5 mx-5 font-weight-bold\">This is a full stack web app for college students with full authentication.\r\n                        User can create profile, provide coding platforms username and all relevant details will be fetched using API’s.\r\n                        User can write blogs and can share their interview experiences.\r\n                        Implemented autosearch feature for searching user’s profile.</h6>\r\n                        <hr className=\"hr-text mt-5\" data-content=\"Developed by\"></hr>\r\n                        <h6 className=\"white-text text-center mt-5 mb-5 mx-5 font-weight-bold\">Jeel Baraiya |  Hrujul Thumar</h6>\r\n                </MDBCardBody>\r\n            </MDBCard>\r\n            </MDBContainer>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default About\r\n",{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","replacedBy":"172"},{"ruleId":"173","severity":1,"message":"174","line":23,"column":11,"nodeType":"175","messageId":"176","endLine":23,"endColumn":15},{"ruleId":"177","severity":1,"message":"178","line":64,"column":8,"nodeType":"179","endLine":64,"endColumn":10,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":105,"column":47,"nodeType":"183","endLine":105,"endColumn":59},{"ruleId":"173","severity":1,"message":"184","line":1,"column":27,"nodeType":"175","messageId":"176","endLine":1,"endColumn":37},{"ruleId":"173","severity":1,"message":"185","line":1,"column":39,"nodeType":"175","messageId":"176","endLine":1,"endColumn":48},{"ruleId":"173","severity":1,"message":"186","line":2,"column":8,"nodeType":"175","messageId":"176","endLine":2,"endColumn":13},{"ruleId":"173","severity":1,"message":"187","line":20,"column":13,"nodeType":"175","messageId":"176","endLine":20,"endColumn":22},{"ruleId":"177","severity":1,"message":"178","line":69,"column":8,"nodeType":"179","endLine":69,"endColumn":10,"suggestions":"188"},{"ruleId":"173","severity":1,"message":"189","line":3,"column":106,"nodeType":"175","messageId":"176","endLine":3,"endColumn":117},{"ruleId":"173","severity":1,"message":"190","line":4,"column":1,"nodeType":"175","messageId":"176","endLine":4,"endColumn":18},{"ruleId":"173","severity":1,"message":"191","line":4,"column":20,"nodeType":"175","messageId":"176","endLine":4,"endColumn":35},{"ruleId":"173","severity":1,"message":"192","line":4,"column":37,"nodeType":"175","messageId":"176","endLine":4,"endColumn":52},{"ruleId":"173","severity":1,"message":"193","line":9,"column":13,"nodeType":"175","messageId":"176","endLine":9,"endColumn":19},{"ruleId":"173","severity":1,"message":"194","line":9,"column":21,"nodeType":"175","messageId":"176","endLine":9,"endColumn":30},{"ruleId":"195","severity":1,"message":"196","line":29,"column":42,"nodeType":"197","messageId":"198","endLine":29,"endColumn":44},{"ruleId":"195","severity":1,"message":"196","line":39,"column":42,"nodeType":"197","messageId":"198","endLine":39,"endColumn":44},{"ruleId":"173","severity":1,"message":"199","line":1,"column":38,"nodeType":"175","messageId":"176","endLine":1,"endColumn":44},{"ruleId":"173","severity":1,"message":"200","line":6,"column":8,"nodeType":"175","messageId":"176","endLine":6,"endColumn":14},{"ruleId":"173","severity":1,"message":"201","line":7,"column":10,"nodeType":"175","messageId":"176","endLine":7,"endColumn":22},{"ruleId":"173","severity":1,"message":"202","line":7,"column":47,"nodeType":"175","messageId":"176","endLine":7,"endColumn":60},{"ruleId":"173","severity":1,"message":"203","line":119,"column":17,"nodeType":"175","messageId":"176","endLine":119,"endColumn":21},{"ruleId":"173","severity":1,"message":"204","line":166,"column":13,"nodeType":"175","messageId":"176","endLine":166,"endColumn":17},{"ruleId":"177","severity":1,"message":"205","line":150,"column":8,"nodeType":"179","endLine":150,"endColumn":10,"suggestions":"206"},{"ruleId":"173","severity":1,"message":"207","line":34,"column":13,"nodeType":"175","messageId":"176","endLine":34,"endColumn":19},{"ruleId":"173","severity":1,"message":"208","line":34,"column":21,"nodeType":"175","messageId":"176","endLine":34,"endColumn":30},{"ruleId":"177","severity":1,"message":"209","line":57,"column":9,"nodeType":"179","endLine":57,"endColumn":11,"suggestions":"210"},{"ruleId":"173","severity":1,"message":"211","line":114,"column":23,"nodeType":"175","messageId":"176","endLine":114,"endColumn":26},{"ruleId":"173","severity":1,"message":"211","line":125,"column":23,"nodeType":"175","messageId":"176","endLine":125,"endColumn":26},{"ruleId":"177","severity":1,"message":"212","line":34,"column":8,"nodeType":"179","endLine":34,"endColumn":10,"suggestions":"213"},{"ruleId":"173","severity":1,"message":"211","line":70,"column":23,"nodeType":"175","messageId":"176","endLine":70,"endColumn":26},{"ruleId":"173","severity":1,"message":"211","line":80,"column":23,"nodeType":"175","messageId":"176","endLine":80,"endColumn":26},{"ruleId":"173","severity":1,"message":"214","line":14,"column":10,"nodeType":"175","messageId":"176","endLine":14,"endColumn":18},{"ruleId":"173","severity":1,"message":"215","line":15,"column":8,"nodeType":"175","messageId":"176","endLine":15,"endColumn":21},{"ruleId":"173","severity":1,"message":"216","line":16,"column":46,"nodeType":"175","messageId":"176","endLine":16,"endColumn":58},{"ruleId":"173","severity":1,"message":"217","line":16,"column":60,"nodeType":"175","messageId":"176","endLine":16,"endColumn":66},{"ruleId":"173","severity":1,"message":"218","line":16,"column":84,"nodeType":"175","messageId":"176","endLine":16,"endColumn":91},{"ruleId":"173","severity":1,"message":"201","line":16,"column":93,"nodeType":"175","messageId":"176","endLine":16,"endColumn":105},{"ruleId":"177","severity":1,"message":"219","line":54,"column":8,"nodeType":"179","endLine":54,"endColumn":10,"suggestions":"220"},{"ruleId":"173","severity":1,"message":"221","line":56,"column":11,"nodeType":"175","messageId":"176","endLine":56,"endColumn":19},{"ruleId":"173","severity":1,"message":"222","line":71,"column":17,"nodeType":"175","messageId":"176","endLine":71,"endColumn":21},{"ruleId":"177","severity":1,"message":"223","line":39,"column":8,"nodeType":"179","endLine":39,"endColumn":10,"suggestions":"224"},{"ruleId":"173","severity":1,"message":"222","line":79,"column":19,"nodeType":"175","messageId":"176","endLine":79,"endColumn":23},{"ruleId":"173","severity":1,"message":"222","line":77,"column":19,"nodeType":"175","messageId":"176","endLine":77,"endColumn":23},{"ruleId":"173","severity":1,"message":"211","line":53,"column":19,"nodeType":"175","messageId":"176","endLine":53,"endColumn":22},{"ruleId":"173","severity":1,"message":"225","line":3,"column":23,"nodeType":"175","messageId":"176","endLine":3,"endColumn":29},{"ruleId":"173","severity":1,"message":"226","line":3,"column":30,"nodeType":"175","messageId":"176","endLine":3,"endColumn":36},{"ruleId":"173","severity":1,"message":"227","line":3,"column":74,"nodeType":"175","messageId":"176","endLine":3,"endColumn":85},{"ruleId":"173","severity":1,"message":"218","line":3,"column":87,"nodeType":"175","messageId":"176","endLine":3,"endColumn":94},"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isLoading'. Either include it or remove the dependency array. You can also do a functional update 'setIsLoading(i => ...)' if you only need 'isLoading' in the 'setIsLoading' call.","ArrayExpression",["230"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useReducer' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'isLoading' is assigned a value but never used.",["231"],"'MDBDropdown' is defined but never used.","'MDBDropdownToggle' is defined but never used.","'MDBDropdownMenu' is defined but never used.","'MDBDropdownItem' is defined but never used.","'select' is assigned a value but never used.","'setSelect' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useRef' is defined but never used.","'purple' is defined but never used.","'MDBContainer' is defined but never used.","'MDBCardFooter' is defined but never used.","'res3' is assigned a value but never used.","'res5' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.location.userId'. Either include it or remove the dependency array.",["232"],"'errors' is assigned a value but never used.","'setErrors' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.location.data'. Either include it or remove the dependency array.",["233"],"'res' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'formData' and 'props.location'. Either include them or remove the dependency array.",["234"],"'CKEditor' is defined but never used.","'ClassicEditor' is defined but never used.","'MDBCardTitle' is defined but never used.","'MDBBtn' is defined but never used.","'MDBIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'props.data.experience', 'props.data.text', and 'props.data.title'. Either include them or remove the dependency array. If 'setTitle' needs the current value of 'props.data.title', you can also switch to useReducer instead of useState and read 'props.data.title' in the reducer.",["235"],"'onDelete' is assigned a value but never used.","'res1' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.postId' and 'props.type'. Either include them or remove the dependency array.",["236"],"'MDBCol' is defined but never used.","'MDBRow' is defined but never used.","'MDBCardText' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"237","fix":"238"},{"desc":"237","fix":"239"},{"desc":"240","fix":"241"},{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},"Update the dependencies array to be: [isLoading]",{"range":"250","text":"251"},{"range":"252","text":"251"},"Update the dependencies array to be: [props.location.userId]",{"range":"253","text":"254"},"Update the dependencies array to be: [props.location.data]",{"range":"255","text":"256"},"Update the dependencies array to be: [formData, props.location]",{"range":"257","text":"258"},"Update the dependencies array to be: [props.data.experience, props.data.text, props.data.title]",{"range":"259","text":"260"},"Update the dependencies array to be: [props.postId, props.type]",{"range":"261","text":"262"},[1644,1646],"[isLoading]",[1807,1809],[5892,5894],"[props.location.userId]",[3382,3384],"[props.location.data]",[1260,1262],"[formData, props.location]",[2139,2141],"[props.data.experience, props.data.text, props.data.title]",[1092,1094],"[props.postId, props.type]"]